<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.f"
	xmlns:n0="sap.f"
	xmlns:n1="sap.m"
	xmlns:n2="sap.ui.core"
	xmlns:n3="sap.f.cards"
	xmlns:n4="sap.ui.layout.cssgrid"
	>
	<xsd:import namespace="sap.m"/>
	<xsd:import namespace="sap.ui.core"/>
	<xsd:import namespace="sap.f.cards"/>
	<xsd:import namespace="sap.ui.layout.cssgrid"/>
	<xsd:element name="Avatar" type="n0:_AvatarType" substitutionGroup="n1:Avatar">
		<xsd:annotation>
			<xsd:documentation>An image-like control that has different display options for representing images, initials, and icons.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;Avatar&lt;/code&gt; control allows the usage of different content, shapes, and sizes depending on the use case.

The content types that can be displayed are either images, icons, or initials. The shape can be circular or square. There are several predefined sizes, as well as an option to set a custom size.

&lt;h3&gt;Usage&lt;/h3&gt;

Up to two Latin letters can be displayed as initials in an &lt;code&gt;Avatar&lt;/code&gt;. If there are more than two letters, or if there's a non-Latin character present, a default image placeholder will be created.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="AvatarGroup" type="n0:_AvatarGroupType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>Displays a group of avatars arranged horizontally. It is useful to visually showcase a group of related avatars, such as, project team members or employees.

&lt;h3&gt;Overview&lt;/h3&gt;

The control allows you to display the avatars in different sizes, depending on your use case.

The &lt;code&gt;AvatarGroup&lt;/code&gt; control has two group types: &lt;ul&gt; &lt;li&gt;&lt;code&gt;Group&lt;/code&gt; type: The avatars are displayed as partially overlapped on top of each other and the entire group has one click/tap area.&lt;/li&gt; &lt;li&gt;&lt;code&gt;Individual&lt;/code&gt; type: The avatars are displayed side-by-side and each avatar has its own click/tap area.&lt;/li&gt; &lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

When the available space is less than the width required to display all avatars, an overflow visualization appears as a button placed at the end with the same shape and size as the avatars. The visualization displays the number of avatars that have overflowed and are not currently visible.

&lt;h3&gt;Usage&lt;/h3&gt;

Use the &lt;code&gt;AvatarGroup&lt;/code&gt; if: &lt;ul&gt; &lt;li&gt;You want to display a group of avatars.&lt;/li&gt; &lt;li&gt;You want to display several avatars which have something in common.&lt;/li&gt; &lt;/ul&gt;

Do not use the &lt;code&gt;AvatarGroup&lt;/code&gt; if: &lt;ul&gt; &lt;li&gt;You want to display a single avatar.&lt;/li&gt; &lt;li&gt;You want to display a gallery for simple images.&lt;/li&gt; &lt;li&gt;You want to use it for other visual content than avatars.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="AvatarGroupItem" type="n0:_AvatarGroupItemType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>Represents a single avatar item displayed in the {@link sap.f.AvatarGroup} control.

&lt;h3&gt;Overview&lt;/h3&gt; The &lt;code&gt;AvatarGroupItem&lt;/code&gt; control allows you to define additional properties that are applied when rendering each &lt;code&gt;AvatarGroupItem&lt;/code&gt; instance in the {@link sap.f.AvatarGroup} control.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Card" type="n0:_CardType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A control that represents a container with a predefined header and content.

&lt;h3&gt;Overview&lt;/h3&gt; The card is a container for grouping and displaying information.

&lt;h3&gt;Structure&lt;/h3&gt; You can control the width and height of the card, using properties. The &lt;code&gt;Card&lt;/code&gt; has the following aggregations: &lt;ul&gt; &lt;li&gt;&lt;code&gt;header&lt;/code&gt; - can be either a {@link sap.f.cards.Header Header} or a {@link sap.f.cards.NumericHeader NumericHeader} &lt;li&gt;&lt;code&gt;content&lt;/code&gt; - can be any {@link sap.ui.core.Control Control}.&lt;/li&gt; &lt;/ul&gt;

&lt;h3&gt;Guidelines:&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;A card should represent a task or visualize a specific set of information.&lt;/li&gt; &lt;li&gt;It is recommended to use cards on home page layouts.&lt;/li&gt; &lt;li&gt;The card shouldn't be large with a lot of content.&lt;/li&gt; &lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt; To show a KPI value or any numeric information, use {@link sap.f.cards.NumericHeader NumericHeader} as a card header. For any other use cases, use the regular {@link sap.f.cards.Header Header}. Recommended content: - List - Table - Object information - Charts - Timelines - Images

&lt;i&gt;When to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;When you need multiple cards on a home page layout.&lt;/li&gt; &lt;li&gt;When you have to achieve simple card visualization.&lt;/li&gt; &lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;When you have to reuse the card between applications. For such cases, use: {@link sap.ui.integration.widgets.Card Integration Card}.&lt;/li&gt; &lt;li&gt;When you need nesting. For such cases, use: {@link sap.m.Panel Panel}.&lt;/li&gt; &lt;li&gt;When the card is not part of a card layout. For such cases, use: {@link sap.m.Panel Panel}.&lt;/li&gt; &lt;li&gt;When you need more header configuration flexibility.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DynamicPage" type="n0:_DynamicPageType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A layout control, representing a web page, consisting of a title, header with dynamic behavior, a content area, and an optional floating footer.

&lt;h3&gt;Overview&lt;/h3&gt;

The control consist of several components:

&lt;ul&gt;&lt;li&gt;{@link sap.f.DynamicPageTitle DynamicPageTitle} - consists of a heading on the left side, content in the middle, and actions on the right. The displayed content changes based on the current mode of the {@link sap.f.DynamicPageHeader DynamicPageHeader}.&lt;/li&gt; &lt;li&gt;{@link sap.f.DynamicPageHeader DynamicPageHeader} - a generic container, which can contain a single layout control and does not care about the content alignment and responsiveness. The header works in two modes - expanded and snapped and its behavior can be adjusted with the help of different properties.&lt;/li&gt; &lt;li&gt;Content area - a generic container, which can have a single UI5 layout control and does not care about the content alignment and responsiveness.&lt;/li&gt; &lt;li&gt;Footer - positioned at the bottom with a small offset and used for additional actions, the footer floats above the content. It can be any {@link sap.m.IBar} control.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

Use the &lt;code&gt;DynamicPage&lt;/code&gt; if you need to have a title, that is always visible and a header, that has configurable Expanding/Snapping functionality. If you don't need the Expanding/Snapping functionality it is better to use the {@link sap.m.Page} as a lighter control.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;If you're displaying a {@link sap.m.FlexBox} with non-adaptive content (doesn't stretch to fill the available space), it is recommended to set the &lt;code&gt;fitContainer&lt;/code&gt; property of the {@link sap.m.FlexBox FlexBox} to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;If you are displaying a {@link sap.ui.table.Table}, keep in mind that it is non-adaptive and may cause unpredicted behavior for the &lt;code&gt;DynamicPage&lt;/code&gt; on smaller screen sizes, such as mobile.&lt;/li&gt; &lt;li&gt;Snapping of the {@link sap.f.DynamicPageTitle DynamicPageTitle} is not supported in the following case: When the &lt;code&gt;DynamicPage&lt;/code&gt; has a scroll bar, the control usually scrolls to the snapping point - the point, where the {@link sap.f.DynamicPageHeader DynamicPageHeader} is scrolled out completely. However, when there is a scroll bar, but not enough content to reach the snapping point, the snapping is not possible using scrolling.&lt;/li&gt; &lt;li&gt;When using {@link sap.ui.layout.form.Form}, {@link sap.m.Panel}, {@link sap.m.Table} and {@link sap.m.List} controls in the content of &lt;code&gt;DynamicPage&lt;/code&gt;, you need to adjust their left text offset if you want to achieve vertical alignment between the &lt;code&gt;sap.f.DynamicPageHeader&lt;/code&gt;`s content and &lt;code&gt;DynamicPage&lt;/code&gt;`s content. For more information, see the documentation for the &lt;code&gt;content&lt;/code&gt; aggregation.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPage&lt;/code&gt; depends on the behavior of the content that is displayed. To adjust the &lt;code&gt;DynamicPage&lt;/code&gt; content padding, the &lt;code&gt;sapUiContentPadding&lt;/code&gt;, &lt;code&gt;sapUiNoContentPadding&lt;/code&gt;, and &lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt; CSS classes can be used.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DynamicPageAccessibleLandmarkInfo" type="n0:_DynamicPageAccessibleLandmarkInfoType" substitutionGroup="n2:Element">
		<xsd:annotation>
			<xsd:documentation>Settings for accessible landmarks which can be applied to the container elements of a &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

These landmarks are used by assistive technologies (such as screen readers) to provide a meaningful page overview.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DynamicPageHeader" type="n0:_DynamicPageHeaderType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>Header of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; control is part of the {@link sap.f.DynamicPage} family and is used to serve as header of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; can hold any layout control and has two states - expanded and collapsed (snapped). The switching between these states happens when:

&lt;ul&gt;&lt;li&gt;the user scrolls below its bottom margin&lt;/li&gt; &lt;li&gt;the user clicks on the {@link sap.f.DynamicPageTitle DynamicPageTitle}&lt;/li&gt; &lt;li&gt;through the {@link sap.f.DynamicPage DynamicPage} property &lt;code&gt;headerExpanded&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageHeader&lt;/code&gt; depends on the behavior of the content that is displayed.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DynamicPageTitle" type="n0:_DynamicPageTitleType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>Title of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; control is part of the {@link sap.f.DynamicPage} family and is used to serve as title of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; can hold any control and displays the most important information regarding the object that will always remain visible while scrolling.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s recommended to use controls, suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.

If the &lt;code&gt;toggleHeaderOnTitleClick&lt;/code&gt; property of the {@link sap.f.DynamicPage DynamicPage} is set to &lt;code&gt;true&lt;/code&gt;, the user can switch between the expanded/collapsed states of the {@link sap.f.DynamicPageHeader DynamicPageHeader} by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt; or by using the expand/collapse visual indicators, positioned at the bottom of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable, the visual indicators are not available, and the app must provide other means for expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; depends on the behavior of the content that is displayed.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="FlexibleColumnLayout" type="n0:_FlexibleColumnLayoutType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>Implements the master-detail-detail paradigm by displaying up to three pages in separate columns.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is logically similar to {@link sap.m.SplitContainer} with the difference that it capable of handling three columns (referred to as &lt;code&gt;Begin&lt;/code&gt;, &lt;code&gt;Mid&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt;) rather than two (&lt;code&gt;Master&lt;/code&gt;, &lt;code&gt;Detail&lt;/code&gt;). The width of the three columns is variable.

There are several possible layouts that can be changed either with the control's API, or by the user with the help of layout arrows.

Internally the control makes use of three instances of {@link sap.m.NavContainer}, thus forming the three columns.

&lt;h3&gt;Usage&lt;/h3&gt;

Use this control for applications that need to display several logical levels of related information side by side (e.g. list of items, item, sub-item, etc.). The control is flexible in a sense that the application can focus the user's attention on one particular column by making it larger or even fullscreen.

The columns are accessible with the &lt;code&gt;beginColumnPages&lt;/code&gt;, &lt;code&gt;midColumnPages&lt;/code&gt; and &lt;code&gt;endColumnPages&lt;/code&gt; aggregations.

The relative sizes and the visibility of the three columns are determined based on the value of the {@link sap.f.LayoutType layout} property.

Changes to the layout due to user interaction are communicated to the app with the &lt;code&gt;stateChange&lt;/code&gt; event.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;To easily implement the recommended UX design of a &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt;-based app, you can use the &lt;code&gt;sap.f.FlexibleColumnLayoutSemanticHelper&lt;/code&gt; class.&lt;/li&gt; &lt;li&gt;To facilitate the navigation and view loading, you can use the {@link sap.f.routing.Router} &lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The control automatically displays the maximum possible number of columns based on the device size and current &lt;code&gt;layout&lt;/code&gt;. The app does not need to take into consideration the current device/screen size, but only to add content to the columns and change the value of the &lt;code&gt;layout&lt;/code&gt; property.

For detailed information, see {@link sap.f.LayoutType LayoutType} enumeration.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="GridContainer" type="n0:_GridContainerType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A layout container control used for aligning items with various sizes in a simple grid.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is used to align tiles, cards and other controls in configuration, such as a home page or a dashboard. It represents a grid layout with specific row and column sizes, in which the items can take any number of rows and columns.

The number of columns and rows each item takes can be configured with the use of the &lt;code&gt;{@link sap.f.GridContainerItemLayoutData}&lt;/code&gt;.

All rows have the same height and all columns have the same width. Their sizes can be configured with the use of the &lt;code&gt;layout&lt;/code&gt; aggregation and &lt;code&gt;{@link sap.f.GridContainerSettings}&lt;/code&gt;.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;i&gt;When to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;For aligning home page and dashboard items like Tiles and Cards in a simple grid system with equally sized rows and columns.&lt;/li&gt; &lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;If a more complex layout grid system, where columns and rows may vary in size, is needed.&lt;/li&gt; &lt;/ul&gt;

&lt;h3&gt;Example:&lt;/h3&gt; &lt;pre&gt;
&amp;lt;f:GridContainer&amp;gt;
	&amp;lt;f:layout&amp;gt;
		&amp;lt;f:GridContainerSettings rowSize=&amp;quot;5rem&amp;quot; columnSize=&amp;quot;5rem&amp;quot; gap=&amp;quot;1rem&amp;quot; /&amp;gt;
	&amp;lt;/f:layout&amp;gt;
	&amp;lt;f:layoutS&amp;gt;
		&amp;lt;f:GridContainerSettings rowSize=&amp;quot;4rem&amp;quot; columnSize=&amp;quot;4rem&amp;quot; gap=&amp;quot;0.5rem&amp;quot; /&amp;gt;
	&amp;lt;/f:layoutS&amp;gt;
	&amp;lt;f:items&amp;gt;
		&amp;lt;GenericTile header=&amp;quot;Sales Fulfillment&amp;quot;&amp;gt;
			&amp;lt;layoutData&amp;gt;
				&amp;lt;f:GridContainerItemLayoutData rows=&amp;quot;2&amp;quot; columns=&amp;quot;2&amp;quot; /&amp;gt;
			&amp;lt;/layoutData&amp;gt;
		&amp;lt;/GenericTile&amp;gt;
		&amp;lt;w:Card manifest=&amp;quot;url-to-manifest&amp;quot;&amp;gt;
			&amp;lt;w:layoutData&amp;gt;
				&amp;lt;f:GridContainerItemLayoutData rows=&amp;quot;6&amp;quot; columns=&amp;quot;3&amp;quot; /&amp;gt;
			&amp;lt;/w:layoutData&amp;gt;
		&amp;lt;/w:Card&amp;gt;
		&amp;lt;Panel&amp;gt;
			&amp;lt;layoutData&amp;gt;
				&amp;lt;f:GridContainerItemLayoutData columns=&amp;quot;4&amp;quot; /&amp;gt;
			&amp;lt;/layoutData&amp;gt;
			&amp;lt;Text text=&amp;quot;Sales information&amp;quot; /&amp;gt;
		&amp;lt;/Panel&amp;gt;
	&amp;lt;/f:items&amp;gt;
&amp;lt;/f:GridContainer&amp;gt;
&lt;/pre&gt;

&lt;h3&gt;Drag and drop:&lt;/h3&gt; Drag and drop is enabled for the &lt;code&gt;GridContainer&lt;/code&gt; with enhanced visualization and interaction, better suited for grid items. This is configured by using the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt;.

Similar to the &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt;, &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; has to be added to the &lt;code&gt;dragDropConfig&lt;/code&gt; aggregation, by using &lt;code&gt;{@link sap.ui.core.Element#addDragDropConfig}&lt;/code&gt;.

Both &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt; and &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; can be used to configure drag and drop. The difference is that the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; will provide a drop indicator, which mimics the size of the dragged item and shows the potential drop position inside the grid.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="GridContainerItemLayoutData" type="n0:_GridContainerItemLayoutDataType" substitutionGroup="n2:LayoutData">
		<xsd:annotation>
			<xsd:documentation>Holds layout data for an item inside a &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="GridContainerSettings" type="n0:_GridContainerSettingsType">
		<xsd:annotation>
			<xsd:documentation>Holds a set of settings that define the dimensions of &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.

Can be used to define the sizes of columns and rows for different screen sizes, by using the &lt;code&gt;layout&lt;/code&gt; aggregations of &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="GridList" type="n0:_GridListType" substitutionGroup="n1:ListBase">
		<xsd:annotation>
			<xsd:documentation>A list-based control with grid layout capabilities.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is based on {@link sap.m.ListBase} and adds the flexibility to configure different grid layouts. The layout used is based on the CSS display grid and the control has a default configuration.

With &lt;code&gt;customLayout&lt;/code&gt; aggregation it is possible to use: &lt;ul&gt; &lt;li&gt;Predefined simple grid layouts such as {@link sap.ui.layout.cssgrid.GridBoxLayout GridBoxLayout}&lt;/li&gt; &lt;li&gt;Flexible grid layouts, such as {@link sap.ui.layout.cssgrid.GridBasicLayout GridBasicLayout} or {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout} which reveal the native-browser CSS display grid APIs. For more information, see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout MDN web docs: CSS Grid Layout}&lt;/li&gt; &lt;/ul&gt;

Every item can override its size by specifying the number of columns and/or rows it will take in the grid. This is done using {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}.

For best visualization, items of type {@link sap.f.GridListItem sap.f.GridListItem} should be used inside the &lt;code&gt;items&lt;/code&gt; aggregation.

&lt;h3&gt;Usage&lt;/h3&gt;

For general cases, use the default grid configuration of the &lt;code&gt;GridList&lt;/code&gt;. For Box case (equal sized items), use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridBoxLayout GridBoxLayout} For Grids which need different configurations based on available width, use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout} To set a specific position to an item or define its dimensions in the grid, pass &lt;code&gt;layoutData&lt;/code&gt; of type {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}

&lt;i&gt;When to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;If {@link sap.m.ListBase} features are required and the items must be positioned in a grid layout&lt;/li&gt; &lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt; &lt;ul&gt; &lt;li&gt;If a list layout is required, use {@link sap.m.List} instead. &lt;li&gt;If only the layout is required, use {@link sap.ui.layout.cssgrid.CSSGrid} instead. &lt;/ul&gt;

&lt;h3&gt;Drag and drop:&lt;/h3&gt; Drag and drop is enabled for the &lt;code&gt;GridList&lt;/code&gt; with enhanced visualization and interaction, better suited for grid items. This is configured by using the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt;.

Similar to the &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt;, &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; has to be added to the &lt;code&gt;dragDropConfig&lt;/code&gt; aggregation, by using &lt;code&gt;{@link sap.ui.core.Element#addDragDropConfig}&lt;/code&gt;.

Both &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt; and &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; can be used to configure drag and drop. The difference is that the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; will provide a drop indicator, which mimics the size of the dragged item and shows the potential drop position inside the grid.

&lt;h3&gt;Current Limitations&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;For Microsoft Internet Explorer some layouts are not supported, due to browser specifics.&lt;/li&gt; &lt;li&gt;For Microsoft Edge 15 and older versions some layouts are not supported, due to browser specifics.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="GridListItem" type="n0:_GridListItemType" substitutionGroup="n1:ListItemBase">
		<xsd:annotation>
			<xsd:documentation>The &lt;code&gt;GridListItem&lt;/code&gt; with a content aggregation can be used to display all kind of information. It is used in {@link sap.f.GridList sap.f.GridList}. &lt;b&gt;Note:&lt;/b&gt; Even though the content aggregation can be used for any control, complex responsive layout controls, such as &lt;code&gt;Table, Form&lt;/code&gt;, etc, should not be aggregated as content.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ProductSwitch" type="n0:_ProductSwitchType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A layout control that provides specific configuration about how the items should be displayed.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ProductSwitchItem" type="n0:_ProductSwitchItemType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A control that is used as a child of &lt;code&gt;ProductSwitch&lt;/code&gt;

&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;ProductSwitchItem&lt;/code&gt; is not supported when used outside of &lt;code&gt;ProductSwitch&lt;/code&gt;.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="SearchManager" type="n0:_SearchManagerType" substitutionGroup="n2:Element">
		<xsd:annotation>
			<xsd:documentation>Defines specific properties of the search that are applied to &lt;code&gt;sap.f.ShellBar&lt;/code&gt;.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ShellBar" type="n0:_ShellBarType" substitutionGroup="n2:Control">
		<xsd:annotation>
			<xsd:documentation>A horizontal bar control holding multiple child controls used as application shell header.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;ShellBar&lt;/code&gt; is used as the uppermost section (shell) of the app. It is fully responsive and adaptive, and corresponds to the SAP Fiori Design Guidelines.

&lt;h3&gt;Usage&lt;/h3&gt;

Content specified in the &lt;code&gt;ShellBar&lt;/code&gt; properties and aggregations is automatically positioned in dedicated places of the control.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--type definition for UIElement 'sap.f.Avatar'-->
	<xsd:complexType name="_AvatarType">
		<xsd:complexContent>
			<xsd:extension base="n1:_AvatarType"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.AvatarGroup'-->
	<xsd:complexType name="_AvatarGroupType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<!-- default aggregation 'items'-->
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="n0:AvatarGroupItem"/>
						<xsd:element ref="n2:Fragment"/>
					</xsd:choice>
					<xsd:element name="items" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;AvatarGroupItems&lt;/code&gt; contained by the control.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n0:AvatarGroupItem"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="groupType" type="n0:_AvatarGroupTypeType">
					<xsd:annotation>
						<xsd:documentation>Defines the mode of the &lt;code&gt;AvatarGroup&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="avatarDisplaySize" type="n1:_AvatarSizeType">
					<xsd:annotation>
						<xsd:documentation>Defines the display size of each avatar.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="press" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the user clicks or taps on the control.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.AvatarGroupItem'-->
	<xsd:complexType name="_AvatarGroupItemType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:attribute name="src" type="n2:_URIType">
					<xsd:annotation>
						<xsd:documentation>Determines the path to the desired image or icon.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="initials" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the displayed initials.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="fallbackIcon" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the fallback icon displayed in case of wrong image src and no initials set.

&lt;b&gt;Notes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;If not set, a default fallback icon is displayed.&lt;/li&gt; &lt;li&gt;Accepted values are only icons from the SAP icon font.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.Card'-->
	<xsd:complexType name="_CardType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="header" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Defines the header of the card.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="content" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Defines the content of the card.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="width" type="n2:_CSSSizeType">
					<xsd:annotation>
						<xsd:documentation>Defines the width of the card.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="height" type="n2:_CSSSizeType">
					<xsd:annotation>
						<xsd:documentation>Defines the height of the card.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="headerPosition" type="n3:_HeaderPositionType">
					<xsd:annotation>
						<xsd:documentation>Defines the position of the Card Header.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.DynamicPage'-->
	<xsd:complexType name="_DynamicPageType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="title" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; title.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:DynamicPageTitle"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="header" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; header.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:DynamicPageHeader"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="content" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; content.

&lt;b&gt;Note: &lt;/b&gt; You can change the default paddings by adding the following CSS classes: &lt;ul&gt; &lt;li&gt;&lt;code&gt;sapUiContentPadding&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;sapUiNoContentPadding&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; For more information, see {@link topic:c71f6df62dae47ca8284310a6f5fc80a Using Container Content Padding CSS Classes}.

&lt;b&gt;Note:&lt;/b&gt; The SAP Fiori Design guidelines require that the &lt;code&gt;DynamicPageHeader&lt;/code&gt;'s content and the &lt;code&gt;DynamicPage&lt;/code&gt;'s content are aligned vertically. When using {@link sap.ui.layout.form.Form}, {@link sap.m.Panel}, {@link sap.m.Table} and {@link sap.m.List} in the content area of &lt;code&gt;DynamicPage&lt;/code&gt;, if the content is not already aligned, you need to adjust their left text offset to achieve the vertical alignment. To do this, apply the &lt;code&gt;sapFDynamicPageAlignContent&lt;/code&gt; CSS class to them and set their &lt;code&gt;width&lt;/code&gt; property to &lt;code&gt;auto&lt;/code&gt; (if not set by default).

Example:

&lt;pre&gt;
&lt;code&gt; &amp;lt;Panel class=“sapFDynamicPageAlignContent” width=“auto”&amp;gt;&amp;lt;/Panel&amp;gt; &lt;/code&gt;
&lt;/pre&gt;

Please keep in mind that the alignment is not possible in the following cases: &lt;ul&gt; &lt;li&gt; When the controls are placed in an {@link sap.ui.layout.Grid} or other layout controls that use &lt;code&gt;overflow:hidden&lt;/code&gt; CSS property&lt;/li&gt; &lt;li&gt; In case any of the following CSS classes is applied to &lt;code&gt;DynamicPage&lt;/code&gt;: &lt;code&gt;sapUiContentPadding&lt;/code&gt;, &lt;code&gt;sapUiNoContentPadding&lt;/code&gt; or &lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="footer" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; floating footer.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="landmarkInfo" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Accessible landmark settings to be applied on the containers of the &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set, no landmarks will be written.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:DynamicPageAccessibleLandmarkInfo"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="preserveHeaderStateOnScroll" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Preserves the current header state when scrolling. For example, if the user expands the header by clicking on the title and then scrolls down the page, the header will remain expanded.

&lt;b&gt;Note:&lt;/b&gt; Based on internal rules, the value of the property is not always taken into account - for example, when the control`s title and header are with height larger than the given threshold.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="headerExpanded" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the header is expanded.

The header can be also expanded/collapsed by user interaction, which requires the property to be internally mutated by the control to reflect the changed state.

&lt;b&gt;Note:&lt;/b&gt; As of version 1.48, you can initialize the control in collapsed header state by setting this property to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="toggleHeaderOnTitleClick" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the user can switch between the expanded/collapsed states of the &lt;code&gt;DynamicPageHeader&lt;/code&gt; by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt; or by using the expand/collapse visual indicators, positioned at the bottom of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable, the visual indicators are not available and the application must provide other means for expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.

&lt;b&gt;Note: &lt;/b&gt; This property is taken into account only if a non-empty &lt;code&gt;header&lt;/code&gt; aggregation is provided.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showFooter" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the footer is visible.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="backgroundDesign" type="n1:_PageBackgroundDesignType">
					<xsd:annotation>
						<xsd:documentation>Determines the background color of &lt;code&gt;DynamicPage&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="fitContent" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Optimizes &lt;code&gt;DynamicPage&lt;/code&gt; responsiveness on small screens and behavior when expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It is recommended to use this property when displaying content of adaptive controls that stretch to fill the available space. Such controls may be {@link sap.ui.table.Table} and {@link sap.ui.table.AnalyticalTable} depending on their settings.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="stickySubheaderProvider" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Association of Controls / IDs, that provide sticky subheader content. All controls that provide this content have to implement the &lt;code&gt;sap.f.IDynamicPageStickyContent&lt;/code&gt; interface.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.DynamicPageAccessibleLandmarkInfo'-->
	<xsd:complexType name="_DynamicPageAccessibleLandmarkInfoType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ElementType">
				<xsd:attribute name="rootRole" type="n2:_AccessibleLandmarkRoleType">
					<xsd:annotation>
						<xsd:documentation>Landmark role of the root container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="rootLabel" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Texts which describe the landmark of the root container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="contentRole" type="n2:_AccessibleLandmarkRoleType">
					<xsd:annotation>
						<xsd:documentation>Landmark role of the content container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="contentLabel" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Texts which describe the landmark of the content container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="headerRole" type="n2:_AccessibleLandmarkRoleType">
					<xsd:annotation>
						<xsd:documentation>Landmark role of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="headerLabel" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Texts which describe the landmark of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="footerRole" type="n2:_AccessibleLandmarkRoleType">
					<xsd:annotation>
						<xsd:documentation>Landmark role of the footer container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="footerLabel" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Texts which describe the landmark of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.DynamicPageHeader'-->
	<xsd:complexType name="_DynamicPageHeaderType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<!-- default aggregation 'content'-->
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="n2:Control"/>
						<xsd:element ref="n2:Fragment"/>
						<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml" />
					</xsd:choice>
					<xsd:element name="content" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content of the header.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="pinnable" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the header is pinnable.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
					<xsd:annotation>
						<xsd:documentation>Determines the background color of the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The default value of &lt;code&gt;backgroundDesign&lt;/code&gt; property is null. If the property is not set, the color of the background is &lt;code&gt;@sapUiObjectHeaderBackground&lt;/code&gt;, which depends on the specific theme.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.DynamicPageTitle'-->
	<xsd:complexType name="_DynamicPageTitleType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="heading" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;heading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area and is displayed in both expanded and collapsed (snapped) states of the header. Use this aggregation to display a title (or any other UI5 control that serves as a heading) that has to be present in both expanded and collapsed states of the header.

&lt;b&gt;Notes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;heading&lt;/code&gt; is mutually exclusive with &lt;code&gt;snappedHeading&lt;/code&gt; and &lt;code&gt;expandedHeading&lt;/code&gt;. If &lt;code&gt;heading&lt;/code&gt; is provided, both &lt;code&gt;snappedHeading&lt;/code&gt; and &lt;code&gt;expandedHeading&lt;/code&gt; are ignored. &lt;code&gt;heading&lt;/code&gt; is useful when the content of &lt;code&gt;snappedHeading&lt;/code&gt; and &lt;code&gt;expandedHeading&lt;/code&gt; needs to be the same as it replaces them both.&lt;/li&gt; &lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="snappedHeading" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;snappedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area and is displayed when the header is in collapsed (snapped) state only. Use this aggregation to display a title (or any other UI5 control that serves as a heading) that has to be present in collapsed state only.

&lt;b&gt;Notes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;In order for &lt;code&gt;snappedHeading&lt;/code&gt; to be taken into account, &lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;snappedHeading&lt;/code&gt; with &lt;code&gt;expandedHeading&lt;/code&gt; to switch content when the header switches state.&lt;/li&gt; &lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="expandedHeading" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;expandedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area and is displayed when the header is in expanded state only. Use this aggregation to display a title (or any other UI5 control that serves as a heading) that has to be present in expanded state only.

&lt;b&gt;Note:&lt;/b&gt; In order for &lt;code&gt;expandedHeading&lt;/code&gt; to be taken into account, &lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;expandedHeading&lt;/code&gt; with &lt;code&gt;snappedHeading&lt;/code&gt; to switch content when the header switches state.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="actions" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;DynamicPageTitle&lt;/code&gt; actions. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s recommended to use controls, suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="navigationActions" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The &lt;code&gt;DynamicPageTitle&lt;/code&gt; navigation actions.

&lt;b&gt;Notes:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;navigationActions&lt;/code&gt; position depends on the control size. If the control size is 1280px or bigger, they are rendered right next to the &lt;code&gt;actions&lt;/code&gt;. Otherwise, they are rendered in the top-right area, above the &lt;code&gt;actions&lt;/code&gt;. If a large number of elements(buttons) are used, there could be visual degradations as the space for the &lt;code&gt;navigationActions&lt;/code&gt; is limited.&lt;/li&gt; &lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n1:Button"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="content" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; middle area and displayed in both expanded and collapsed (snapped) states.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="snappedContent" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in collapsed (snapped) state.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content overrides this aggregation when the control is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="expandedContent" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in expanded state.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="snappedTitleOnMobile" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The only content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; when it is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in collapsed (snapped) state.

Using this aggregation enables you to provide a simple, single-line title that takes less space on the smaller phone screens when the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.

&lt;b&gt;Note:&lt;/b&gt; The content set in this aggregation overrides all the other &lt;code&gt;DynamicPageTitle&lt;/code&gt; aggregations and is only visible on phone mobile devices in collapsed (snapped) state of the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n1:Title"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="breadcrumbs" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The breadcrumbs displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; top-left area.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="primaryArea" type="n0:_DynamicPageTitleAreaType">
					<xsd:annotation>
						<xsd:documentation>Determines which of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Begin, Middle) is primary.

&lt;b&gt;Note:&lt;/b&gt; The primary area is shrinking at lower rate, remaining visible as much as it can.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="areaShrinkRatio" type="n0:_DynamicPageTitleShrinkRatioType">
					<xsd:annotation>
						<xsd:documentation>Assigns shrinking ratio to the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Heading, Content, Actions). The greater value a section has the faster it shrinks when the screen size is being reduced.

The value must be set in &lt;code&gt;Heading:Content:Actions&lt;/code&gt; format where Title, Content and Actions are numbers greater than or equal to 0. If set to 0, the respective area will not shrink.

For example, if &lt;code&gt;2:7:1&lt;/code&gt; is set, the Content area will shrink seven times faster than the Actions area. So, when all three areas have width of 500px and the available space is reduced by 100px the Title area will reduced by 20px, the Content area - by 70px and the Actions area - by 10px.

If all the areas have assigned values greater than 1, the numbers are scaled so that at least one of them is equal to 1. For example, value of &lt;code&gt;2:4:8&lt;/code&gt; is equal to &lt;code&gt;1:2:4&lt;/code&gt;.

&lt;Note:&gt; When this property is set the &lt;code&gt;primaryArea&lt;/code&gt; property has no effect.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
					<xsd:annotation>
						<xsd:documentation>Determines the background color of the &lt;code&gt;DynamicPageTitle&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The default value of &lt;code&gt;backgroundDesign&lt;/code&gt; property is null. If the property is not set, the color of the background is &lt;code&gt;@sapUiObjectHeaderBackground&lt;/code&gt;, which depends on the specific theme.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="stateChange" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the title state (expanded/collapsed) is toggled by user interaction. For example, scrolling, title clicking/tapping, using expand/collapse button.

Also fired when the developer toggles the title state by programmatically changing the scroll position of the scrollbar of &lt;code&gt;DynamicPage&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.FlexibleColumnLayout'-->
	<xsd:complexType name="_FlexibleColumnLayoutType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="beginColumnPages" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;Begin&lt;/code&gt; column.

These should be any control with page semantics. These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="midColumnPages" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;Mid&lt;/code&gt; column.

These should be any control with page semantics. These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="endColumnPages" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;End&lt;/code&gt; column.

These should be any control with page semantics. These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="layout" type="n0:_LayoutTypeType">
					<xsd:annotation>
						<xsd:documentation>Determines the layout of the control - number of visible columns and their relative sizes.

For more details, see {@link topic:3b9f760da5b64adf8db7f95247879086 Types of Layout} in the documentation.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="defaultTransitionNameBeginColumn" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;Begin&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="defaultTransitionNameMidColumn" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;Mid&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="defaultTransitionNameEndColumn" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;End&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
					<xsd:annotation>
						<xsd:documentation>Specifies the background color of the content. The visualization of the different options depends on the used theme.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="initialBeginColumnPage" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sets the initial &lt;code&gt;Begin&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="initialMidColumnPage" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sets the initial &lt;code&gt;Mid&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="initialEndColumnPage" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sets the initial &lt;code&gt;End&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="stateChange" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when there is a change in the &lt;code&gt;layout&lt;/code&gt; property or in the maximum number of columns that can be displayed at once. &lt;br/&gt;&lt;/br&gt; &lt;ul&gt;The interactions that may lead to a state change are: &lt;li&gt;the property &lt;code&gt;layout&lt;/code&gt; was changed indirectly by the user clicking a layout arrow&lt;/li&gt; &lt;li&gt;the user resized the browser beyond a breakpoint, thus changing the maximum number of columns that can be displayed at once.&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note: &lt;/b&gt;The event is suppressed while the control has zero width and will be fired the first time it gets a non-zero width</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="beginColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Begin&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="afterBeginColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Begin&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="midColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Mid&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="afterMidColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Mid&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="endColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;End&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="afterEndColumnNavigate" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;End&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.GridContainer'-->
	<xsd:complexType name="_GridContainerType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<!-- default aggregation 'items'-->
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="n2:Control"/>
						<xsd:element ref="n2:Fragment"/>
						<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml" />
					</xsd:choice>
					<xsd:element name="items" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The items contained by the control.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layout" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied if no settings are provided for a specific size.

If no layout is given, a default layout will be used. See the default values for &lt;code&gt;sap.f.GridContainerSettings&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It is not possible to reuse the same instance of &lt;code&gt;GridContainerSettings&lt;/code&gt; for several layouts. New instance has to be created for each of them. This is caused by the fact that one object can exist in only a single aggregation.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layoutXS" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied for size "XS". Range: up to 374px.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layoutS" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied for size "S". Range: 375px - 599px.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layoutM" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied for size "M". Range: 600px - 1023px.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layoutL" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied for size "L". Range: 1023px - 1439px.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="layoutXL" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The sap.f.GridContainerSettings applied for size "XL". Range: from 1440px.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:GridContainerSettings"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="width" type="n2:_CSSSizeType">
					<xsd:annotation>
						<xsd:documentation>Defines the width of the control.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="containerQuery" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; the current range (large, medium or small) is defined by the size of the container surrounding the &lt;code&gt;GridContainer&lt;/code&gt;, instead of the device screen size (media Query).</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="snapToRow" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Should the items stretch to fill the rows that they occupy, or not.

If set to &lt;code&gt;true&lt;/code&gt; the items will stretch.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="allowDenseFill" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Increases the density when arranging the items. Smaller items will take up all of the available space, ignoring their order.

&lt;b&gt;Note:&lt;/b&gt; The order of the items is ignored. An item which is normally at the bottom, can appear on top.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="inlineBlockLayout" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Makes the grid items act like an inline-block elements. They will be arranged in rows with height equal to the highest item in the row.

&lt;b&gt;Note:&lt;/b&gt; If set to &lt;code&gt;true&lt;/code&gt; the properties &lt;code&gt;rowSize&lt;/code&gt; for grid layout, and &lt;code&gt;minRows&lt;/code&gt; and &lt;code&gt;rows&lt;/code&gt; per item will be ignored.

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="layoutChange" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the currently active GridSettings change.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.GridContainerItemLayoutData'-->
	<xsd:complexType name="_GridContainerItemLayoutDataType">
		<xsd:complexContent>
			<xsd:extension base="n2:_LayoutDataType">
				<xsd:attribute name="columns" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Specifies the number of columns, which the item should take

&lt;b&gt;Note:&lt;/b&gt; Make sure that the item does not have more columns than the total columns in the grid. Use {@link sap.f.GridContainer#attachLayoutChange} or a resize listener to handle when columns count is changed for the grid. If item has more columns at some point, they will be automatically reduced to the total grid columns. This is done to prevent broken layout (grid blowout) that affects all items.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="minRows" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Specifies the minimum number of rows, which the item should take.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="rows" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Specifies the number of rows, which the item should take.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.GridContainerSettings'-->
	<xsd:complexType name="_GridContainerSettingsType">
		<xsd:attribute name="columns" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>How many columns to have on a row.

If not defined, &lt;code&gt;sap.f.GridContainer&lt;/code&gt; will position as many columns as they can fit in the container.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="columnSize" type="n2:_CSSSizeType">
			<xsd:annotation>
				<xsd:documentation>The width of the columns.

&lt;b&gt;Note:&lt;/b&gt; Values different than single size in 'px' or 'rem' are not supported for the polyfill for IE.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="minColumnSize" type="n2:_CSSSizeType">
			<xsd:annotation>
				<xsd:documentation>Sets the minimum width of the columns. Setting this together with &lt;code&gt;maxColumnSize&lt;/code&gt; will allow the columns to breath between those two values.

&lt;b&gt;Note:&lt;/b&gt; Will not work in combination with &lt;code&gt;columnSize&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; Not supported for the polyfill for IE.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="maxColumnSize" type="n2:_CSSSizeType">
			<xsd:annotation>
				<xsd:documentation>Sets the maximum width of the columns. Setting this together with &lt;code&gt;minColumnSize&lt;/code&gt; will allow the columns to breath between those two values.

&lt;b&gt;Note:&lt;/b&gt; Will not work in combination with &lt;code&gt;columnSize&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; Not supported for the polyfill for IE.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="rowSize" type="n2:_CSSSizeType">
			<xsd:annotation>
				<xsd:documentation>The height of the rows.

&lt;b&gt;Note:&lt;/b&gt; Use only 'px' or 'rem'. Some features may not work as expected otherwise.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="gap" type="n2:_CSSSizeType">
			<xsd:annotation>
				<xsd:documentation>The size of the gap between columns and rows.

&lt;b&gt;Note:&lt;/b&gt; Use only 'px' or 'rem'. Some features may not work as expected otherwise.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.GridList'-->
	<xsd:complexType name="_GridListType">
		<xsd:complexContent>
			<xsd:extension base="n1:_ListBaseType">
				<xsd:sequence>
					<xsd:element name="customLayout" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Defines a custom grid layout</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n4:GridLayoutBase"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.GridListItem'-->
	<xsd:complexType name="_GridListItemType">
		<xsd:complexContent>
			<xsd:extension base="n1:_ListItemBaseType">
				<xsd:sequence>
					<!-- default aggregation 'content'-->
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="n2:Control"/>
						<xsd:element ref="n2:Fragment"/>
						<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml" />
					</xsd:choice>
					<xsd:element name="content" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The content of this list item</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
									<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.ProductSwitch'-->
	<xsd:complexType name="_ProductSwitchType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="items" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;ProductSwitch&lt;/code&gt; content.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n0:ProductSwitchItem"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="selectedItem" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Sets or retrieves the selected item from the &lt;code&gt;items&lt;/code&gt; aggregation.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="change" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fires when an unselected item is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.ProductSwitchItem'-->
	<xsd:complexType name="_ProductSwitchItemType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence/>
				<xsd:attribute name="src" type="n2:_URIType">
					<xsd:annotation>
						<xsd:documentation>Defines the icon to be displayed as graphical element within the &lt;code&gt;ProductSwitchItem&lt;/code&gt;. It can be an image or an icon from the SAP icon font.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="title" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Determines the title of the &lt;code&gt;ProductSwitchItem&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="subTitle" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Determines the subtitle of the &lt;code&gt;ProductSwitchItem&lt;/code&gt;.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="targetSrc" type="n2:_URIType">
					<xsd:annotation>
						<xsd:documentation>Defines the &lt;code&gt;ProductSwitchItem&lt;/code&gt; target URI. Supports standard hyperlink behavior.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="target" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Specifies a target where the &lt;code&gt;targetSrc&lt;/code&gt; content must be open.

Options are the standard values for window.open() supported by browsers: &lt;code&gt;_self&lt;/code&gt;, &lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;, &lt;code&gt;_parent&lt;/code&gt;, &lt;code&gt;_search&lt;/code&gt;. Alternatively, a frame name can be entered.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.SearchManager'-->
	<xsd:complexType name="_SearchManagerType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ElementType">
				<xsd:sequence>
					<xsd:element name="suggestionItems" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>&lt;code&gt;SuggestionItems&lt;/code&gt; are the items which are displayed in the suggestions list. The following properties can be used: &lt;ul&gt; &lt;li&gt;&lt;code&gt;key&lt;/code&gt; - it is not displayed and may be used as internal technical field&lt;/li&gt; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - it is displayed as normal suggestion text&lt;/li&gt; &lt;li&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - additional text that may be used to visually display search item type or category&lt;/li&gt; &lt;/ul&gt;</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n1:SuggestionItem"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="value" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the input value.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="placeholder" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the text that is displayed when no value is available. The default placeholder text is the word "Search" in the current local language (if supported) or in English.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="maxLength" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Determines the maximum number of characters. Value '0' means the feature is switched off.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="enabled" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the control is enabled.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="enableSuggestions" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>If true, a &lt;code&gt;suggest&lt;/code&gt; event is fired when user types in the input and when the input is focused. On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="search" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the user triggers a search.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="liveChange" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the value of the search field is changed by the user, for example at each key press.

&lt;b&gt;Note:&lt;/b&gt; Do not invalidate or re-render a focused search field, especially during the &lt;code&gt;liveChange&lt;/code&gt; event.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="suggest" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the search field is initially focused or its value is changed by the user. This event means that suggestion data should be updated, in case if suggestions are used. Use the value parameter to create new suggestions for it.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--type definition for UIElement 'sap.f.ShellBar'-->
	<xsd:complexType name="_ShellBarType">
		<xsd:complexContent>
			<xsd:extension base="n2:_ControlType">
				<xsd:sequence>
					<xsd:element name="menu" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The menu attached to the main title.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n1:Menu"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="searchManager" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Configurable search.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;showSearch&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, two search buttons appear.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:SearchManager"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="profile" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The profile avatar.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0">
									<xsd:element ref="n0:Avatar"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="additionalContent" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Additional content to be displayed in the control.

&lt;b&gt;Note:&lt;/b&gt; Only controls implementing the &lt;code&gt;{@link sap.f.IShellBar}&lt;/code&gt; interface are allowed.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:choice minOccurs="0" maxOccurs="unbounded">
									<xsd:element ref="n2:Control"/>
									<xsd:element ref="n2:Fragment"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="title" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the main title of the control.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="secondTitle" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the secondary title of the control.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="homeIcon" type="n2:_URIType">
					<xsd:annotation>
						<xsd:documentation>Defines the URI to the home icon, such as company or product logo.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="homeIconTooltip" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines a custom tooltip for the home icon. If not set, a default tooltip is used.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showMenuButton" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether a hamburger menu button is displayed (as an alternative if the &lt;code&gt;menu&lt;/code&gt; aggregation is not used).</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showNavButton" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether a back navigation button is displayed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showCopilot" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the SAP CoPilot icon is displayed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showSearch" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the search button is displayed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showNotifications" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the notifications button is displayed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="showProductSwitcher" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Determines whether the product switcher button is displayed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="notificationsNumber" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Defines the displayed number of upcoming notifications.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="homeIconPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the &lt;code&gt;homeIcon&lt;/code&gt; is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="menuButtonPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the alternative menu button is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="navButtonPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the navigation/back button is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="copilotPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the SAP CoPilot icon is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="searchButtonPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the search button is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="notificationsPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the notifications button is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="productSwitcherPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the product switcher button is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="avatarPressed" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Fired when the profile avatar is pressed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="_AvatarColorType">
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="_AvatarGroupTypeType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Group">
				<xsd:annotation>
					<xsd:documentation>The avatars are displayed as partially overlapped on top of each other and the entire group has one click/tap area.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Individual">
				<xsd:annotation>
					<xsd:documentation>The avatars are displayed side-by-side and each avatar has its own click/tap area.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="_AvatarImageFitTypeType">
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="_AvatarShapeType">
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="_AvatarSizeType">
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="_AvatarTypeType">
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="_DynamicPageTitleAreaType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Begin">
				<xsd:annotation>
					<xsd:documentation>The area includes the &lt;code&gt;heading&lt;/code&gt;, &lt;code&gt;expandedContent&lt;/code&gt; and &lt;code&gt;snappedContent&lt;/code&gt; aggregations, positioned in the beginning area of the {@link sap.f.DynamicPageTitle}.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Middle">
				<xsd:annotation>
					<xsd:documentation>The area includes the &lt;code&gt;content&lt;/code&gt; aggregation, positioned in the middle part of the {@link sap.f.DynamicPageTitle}.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="_DynamicPageTitleShrinkRatioType">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="([0-9]\d*)(\.\d)?:([0-9]\d*)(\.\d)?:([0-9]\d*)(\.\d)?"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="_LayoutTypeType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="EndColumnFullScreen">
				<xsd:annotation>
					<xsd:documentation>Desktop: -/-/100 only the End column is displayed

Tablet: -/-/100 only the End column is displayed

Phone: -/-/100 only the End column is displayed

Use to display a detail-detail page only, when the user should focus entirely on it.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="MidColumnFullScreen">
				<xsd:annotation>
					<xsd:documentation>Desktop: -/100/- only the Mid column is displayed

Tablet: -/100/- only the Mid column is displayed

Phone: -/100/- only the Mid column is displayed

Use to display a detail page only, when the user should focus entirely on it.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="OneColumn">
				<xsd:annotation>
					<xsd:documentation>Desktop: 100/-/- only the Begin column is displayed

Tablet: 100/-/- only the Begin column is displayed

Phone: 100/-/- only the Begin column is displayed

Use to start with a master page.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="ThreeColumnsBeginExpandedEndHidden">
				<xsd:annotation>
					<xsd:documentation>Desktop: 67/33/0 Begin (expanded) and Mid columns are displayed, End is accessible by layout arrows

Tablet: 67/33/0 Begin (expanded) and Mid columns are displayed, End is accessible by layout arrows

Phone: -/-/100 only the End column is displayed

Use to display the master and detail pages when the user should focus on the master. The detail-detail is still loaded and easily accessible with layout arrows.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="ThreeColumnsEndExpanded">
				<xsd:annotation>
					<xsd:documentation>Desktop: 25/25/50 Begin, Mid and End (expanded) columns are displayed

Tablet: 0/33/67 Mid and End (expanded) columns are displayed, Begin is accessible by layout arrows

Phone: -/-/100 (only the End column is displayed)

Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail-detail.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="ThreeColumnsMidExpanded">
				<xsd:annotation>
					<xsd:documentation>Desktop: 25/50/25 Begin, Mid (expanded) and End columns are displayed

Tablet: 0/67/33 Mid (expanded) and End columns are displayed, Begin is accessible by a layout arrow

Phone: -/-/100 only the End column is displayed

Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="ThreeColumnsMidExpandedEndHidden">
				<xsd:annotation>
					<xsd:documentation>Desktop: 33/67/0 Begin and Mid (expanded) columns are displayed, End is accessible by a layout arrow

Tablet: 33/67/0 Begin and Mid (expanded) columns are displayed, End is accessible by a layout arrow

Phone: -/-/100 only the End column is displayed

Use to display the master and detail pages when the user should focus on the detail. The detail-detail is still loaded and easily accessible with a layout arrow.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="TwoColumnsBeginExpanded">
				<xsd:annotation>
					<xsd:documentation>Desktop: 67/33/- Begin (expanded) and Mid columns are displayed

Tablet: 67/33/- Begin (expanded) and Mid columns are displayed

Phone: -/100/- only the Mid column is displayed

Use to display both a master and a detail page when the user should focus on the master page.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="TwoColumnsMidExpanded">
				<xsd:annotation>
					<xsd:documentation>Desktop: 33/67/- Begin and Mid (expanded) columns are displayed

Tablet: 33/67/- Begin and Mid (expanded) columns are displayed

Phone: -/100/- only the Mid column is displayed

Use to display both a master and a detail page when the user should focus on the detail page.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
</xsd:schema>